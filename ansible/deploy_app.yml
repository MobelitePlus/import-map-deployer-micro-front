# Copy k8s configuration
- hosts: containerdKubernetes
  tasks:
    - name: Copy k8s files
      copy:
        src: ../kubernetes
        dest: /home/k8s-deployer/{{projectName}}
        owner: k8s-deployer
        group: k8s-deployer
        mode: "0644"

    ######################################
    #   Stop running container if exist  #
    ######################################

    # variable app
    - name: check if application container is runing
      command: /bin/sh -c "helm ls | awk '{print $1 }' |grep -w  ^{{projectName}}-{{env}}$"
      register: runningPod
      ignore_errors: yes

    # stop app
    - name: stop project
      command: /bin/sh -c " helm delete {{projectName}}-{{env}} "
      when: runningPod is succeeded
      register: isStopped
      ignore_errors: yes

    # variable terminated pod
    - name: check if pod  is stopped
      command: /bin/sh -c " kubectl get pods -n {{projectName}} | grep -w {{env}} | awk '{print $1}'"
      when: runningPod is succeeded
      register: podStillRunning
      until: podStillRunning.stdout == ""
      retries: 30
      delay: 10

    ######################################
    #    Prepare application volume      #
    ######################################

    # variable mount
    - name: check volume to volume
      command: /bin/sh -c "df |grep -w 'sifast-kubernetes/mnt/nfs-vol-{{projectName}}$'"
      register: mountVar
      ignore_errors: yes

    # check mount path
    - name: check mount path
      command: /bin/sh -c " ls ~/sifast-kubernetes/mnt |grep -w 'nfs-vol-{{projectName}}$'"
      register: pathVar
      ignore_errors: yes

    # prepare volume
    - name: create mount path if not exist
      command: mkdir -p ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}}
      when: pathVar == ""

    # recheck mount path
    - name: recheck mount path
      command: /bin/sh -c " ls ~/sifast-kubernetes/mnt |grep -w 'nfs-vol-{{projectName}}$'"
      register: pathVar
      ignore_errors: yes

    # mounting
    - name: mounting
      command: sudo mount -t nfs -o acl 'storage-nfs.sifast.com:/local_nfs/'{{projectName}} ~/sifast-kubernetes/mnt/'nfs-vol-'{{projectName}}
      when: mountVar.stdout == ""  and not pathVar.stdout == ""

    # update mount stat Var
    - name: check volume to volume
      command: /bin/sh -c "df |grep -w 'sifast-kubernetes/mnt/nfs-vol-{{projectName}}'"
      register: mountVar
      ignore_errors: yes

    ######################################
    #  Initialize projet env directory   #
    ######################################

    # check env directory
    - name: check env directory
      command: /bin/sh -c "ls ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}} |grep -w '{{projectName}}-{{env}}$'"
      register: pathProject
      ignore_errors: yes

    # create env directory if not exist
    - name: create env directory if not exist
      command: mkdir -p ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}}/{{projectName}}-{{env}}
      when: pathProject.stdout == ""

    # create data volume
    - name: create data volume
      command: mkdir -p ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}}/{{projectName}}-{{env}}/config
      when: pathProject.stdout == ""

    # - name: Copy config folder
    #   copy:
    #     src: ../config
    #     dest: ~/sifast-kubernetes/mnt/nfs-vol-{{projectName}}/{{projectName}}-{{env}}/
    #     owner: k8s-deployer
    #     group: k8s-deployer
    #     mode: "0644"

    # umounting
    - name: umount
      command: sudo umount 'storage-nfs.sifast.com:/local_nfs/'{{projectName}}
      when: not mountVar.stdout == ""

    # Deploy application
    # Deploy K8S objet

    # clear helm deployement
    # check if exist failed deployment
    - name: get failed deployment
      command: /bin/sh -c "helm ls --failed | awk '{print $1 }' |grep -w {{projectName}}-{{env}}$"
      register: failedDeployment
      ignore_errors: yes

    # delete failed deployment
    - name: print msg
      shell: echo -e "HEKETI:\n Le deploiement {{projectName}} est en erreur \n Supression du deploiement {{projectName}}-{{env}}"
      when: not failedDeployment.stdout == ""

    - name: delete failed deployment
      command: /bin/sh -c "helm delete {{projectName}}-{{env}}"
      when: not failedDeployment.stdout == ""

    # check namespace existance
    - name: check namespace existance
      command: /bin/sh -c "kubectl get namespace | grep -w  ^{{projectName}}$"
      register: namespace
      ignore_errors: yes

    # create namespace if not exist
    - name: create namespace if not exist
      command: /bin/sh -c "kubectl create namespace {{projectName}}"
      when: namespace.stdout == ""
      ignore_errors: yes

    # define cleanNamespace 'to get params from config_service_ports.yml'
    - name: get clean_namespace variable
      command: /bin/sh -c "echo {{projectName}} | sed "s/-/_/g" "
      register: cleanNamespace
      ignore_errors: yes

    # check deployment existance
    - name: check deployment existance
      command: /bin/sh -c "helm ls | awk '{print $1 }' |grep -w ^{{projectName}}-{{env}}$"
      register: deployment
      ignore_errors: yes

    # create deployment
    - name: print deployment initialisation msg
      shell: echo -e "HELM:\n Initialisation de l'environnment {{projectName}} "

    # deploy application in k8s cluster
    - name: deploy application in k8s cluster
      command: /bin/sh -c " cd ~/{{projectName}}/kubernetes && helm install {{projectName}}-{{env}} {{projectName}} --values ./{{projectName}}/values.yaml"

    # check k8s-secret existance
    - name: check k8s-secret existance
      command: /bin/sh -c "kubectl get secrets -n {{projectName}} | grep -w docker-credentials-{{projectName}}-{{env}}"
      register: secret
      ignore_errors: yes

    # add secret to pull container image from nexus
    - name: print secret creation
      shell: echo -e " create secret "

    - name: add secret to pull container image from nexus
      command: /bin/sh -c "
        kubectl create secret docker-registry 'docker-credentials-'{{projectName}}'-'{{env}} --docker-server=nexus.sifast.com:8087
        --docker-username=docker --docker-password=sifast2017 -n {{projectName}}"
      when: secret.stdout == ""

    # Clear K8S deployment files
    - name: delete K8s files
      file:
        path: ~/{{projectName}}
        state: absent
